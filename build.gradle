plugins {
    id "org.jetbrains.kotlin.multiplatform" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
}

apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            credentials {
                username System.getenv('BINTRAY_USER')
                password System.getenv('BINTRAY_API_KEY')
            }
            url maven_url
        }
    }
}

kotlin {
    jvm()
    js {
        browser {}
        nodejs {}
    }
    iosX64("iosSim")
    iosArm32("ios32")
    iosArm64("ios64")
    macosX64("macos")
    mingwX64("win64")

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "io.ktor:ktor-client-core-js:$ktor_version"
                implementation "io.ktor:ktor-client-json-js:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-js:$ktor_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-js')
                implementation "io.ktor:ktor-client-js:$ktor_version"
                implementation(npm("node-fetch", "*"))
                implementation(npm("text-encoding", "*"))
                implementation(npm("bufferutil", "*"))
                implementation(npm("utf-8-validate", "*"))
                implementation(npm("abort-controller", "*"))
                implementation(npm("fs", "*"))
            }
        }

        nativeCommonMain {
            dependencies {
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"
            }
        }
        nativeCommonTest {
            dependencies {
                implementation "io.ktor:ktor-client-curl:$ktor_version"
            }
        }

        win64Main { dependsOn nativeCommonMain }
        macosMain { dependsOn nativeCommonMain }
        iosSimMain { dependsOn nativeCommonMain }
        ios32Main { dependsOn nativeCommonMain }
        ios64Main { dependsOn nativeCommonMain }

        win64Test { dependsOn nativeCommonTest }
        macosTest { dependsOn nativeCommonTest }
        iosSimTest {
            dependencies {
                implementation "io.ktor:ktor-client-ios:$ktor_version"
            }
        }
    }
}

// TODO: allTest.dependsOn iosTest
task iosTest {
    onlyIf { kotlin.targets.iosSim.publishable }
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 11"
    dependsOn 'linkDebugTestIosSim'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.iosSim.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary.absolutePath
        }
    }
}